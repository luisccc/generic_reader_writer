// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package generic_reader_writer_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } r_ready;
    struct packed {
      logic        q;
    } w_ready;
    struct packed {
      logic        q;
    } r_enable;
    struct packed {
      logic        q;
    } w_enable;
    struct packed {
      logic        q;
    } r_burst;
    struct packed {
      logic        q;
    } w_burst;
    struct packed {
      logic [7:0]  q;
    } r_burst_len;
    struct packed {
      logic [7:0]  q;
    } w_burst_len;
    struct packed {
      logic [7:0]  q;
    } burst_delay;
    struct packed {
      logic        q;
    } r_burst_incr;
    struct packed {
      logic        q;
    } w_burst_incr;
  } generic_reader_writer_reg2hw_control_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } generic_reader_writer_reg2hw_ar_addrl_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } generic_reader_writer_reg2hw_ar_addrh_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } len;
    struct packed {
      logic [2:0]  q;
    } size;
    struct packed {
      logic [3:0]  q;
    } nsaid;
  } generic_reader_writer_reg2hw_ar_cfg_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } generic_reader_writer_reg2hw_aw_addrl_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } generic_reader_writer_reg2hw_aw_addrh_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } len;
    struct packed {
      logic [2:0]  q;
    } size;
    struct packed {
      logic [3:0]  q;
    } nsaid;
  } generic_reader_writer_reg2hw_aw_cfg_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } r_ready;
    struct packed {
      logic        d;
      logic        de;
    } w_ready;
    struct packed {
      logic        d;
      logic        de;
    } r_enable;
    struct packed {
      logic        d;
      logic        de;
    } w_enable;
    struct packed {
      logic        d;
      logic        de;
    } r_burst;
    struct packed {
      logic        d;
      logic        de;
    } w_burst;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } r_burst_len;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } w_burst_len;
    struct packed {
      logic [7:0]  d;
      logic        de;
    } burst_delay;
    struct packed {
      logic        d;
      logic        de;
    } r_burst_incr;
    struct packed {
      logic        d;
      logic        de;
    } w_burst_incr;
  } generic_reader_writer_hw2reg_control_reg_t;

  // Register -> HW type
  typedef struct packed {
    generic_reader_writer_reg2hw_control_reg_t control; // [179:158]
    generic_reader_writer_reg2hw_ar_addrl_reg_t ar_addrl; // [157:126]
    generic_reader_writer_reg2hw_ar_addrh_reg_t ar_addrh; // [125:94]
    generic_reader_writer_reg2hw_ar_cfg_reg_t ar_cfg; // [93:79]
    generic_reader_writer_reg2hw_aw_addrl_reg_t aw_addrl; // [78:47]
    generic_reader_writer_reg2hw_aw_addrh_reg_t aw_addrh; // [46:15]
    generic_reader_writer_reg2hw_aw_cfg_reg_t aw_cfg; // [14:0]
  } generic_reader_writer_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    generic_reader_writer_hw2reg_control_reg_t control; // [29:0]
  } generic_reader_writer_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_CONTROL_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AR_ADDRL_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AR_ADDRH_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AR_CFG_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AW_ADDRL_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AW_ADDRH_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] GENERIC_READER_WRITER_AW_CFG_OFFSET = 6'h 20;

  // Register index
  typedef enum int {
    GENERIC_READER_WRITER_CONTROL,
    GENERIC_READER_WRITER_AR_ADDRL,
    GENERIC_READER_WRITER_AR_ADDRH,
    GENERIC_READER_WRITER_AR_CFG,
    GENERIC_READER_WRITER_AW_ADDRL,
    GENERIC_READER_WRITER_AW_ADDRH,
    GENERIC_READER_WRITER_AW_CFG
  } generic_reader_writer_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] GENERIC_READER_WRITER_PERMIT [7] = '{
    4'b 0111, // index[0] GENERIC_READER_WRITER_CONTROL
    4'b 1111, // index[1] GENERIC_READER_WRITER_AR_ADDRL
    4'b 1111, // index[2] GENERIC_READER_WRITER_AR_ADDRH
    4'b 0011, // index[3] GENERIC_READER_WRITER_AR_CFG
    4'b 1111, // index[4] GENERIC_READER_WRITER_AW_ADDRL
    4'b 1111, // index[5] GENERIC_READER_WRITER_AW_ADDRH
    4'b 0011  // index[6] GENERIC_READER_WRITER_AW_CFG
  };

endpackage

