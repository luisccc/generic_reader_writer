// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module generic_reader_writer_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 6
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output generic_reader_writer_reg_pkg::generic_reader_writer_reg2hw_t reg2hw, // Write
  input  generic_reader_writer_reg_pkg::generic_reader_writer_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import generic_reader_writer_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic control_r_ready_qs;
  logic control_w_ready_qs;
  logic control_r_enable_qs;
  logic control_r_enable_wd;
  logic control_r_enable_we;
  logic control_w_enable_qs;
  logic control_w_enable_wd;
  logic control_w_enable_we;
  logic control_r_burst_qs;
  logic control_r_burst_wd;
  logic control_r_burst_we;
  logic control_w_burst_qs;
  logic control_w_burst_wd;
  logic control_w_burst_we;
  logic [7:0] control_r_burst_len_qs;
  logic [7:0] control_r_burst_len_wd;
  logic control_r_burst_len_we;
  logic [7:0] control_w_burst_len_qs;
  logic [7:0] control_w_burst_len_wd;
  logic control_w_burst_len_we;
  logic [31:0] ar_addrl_qs;
  logic [31:0] ar_addrl_wd;
  logic ar_addrl_we;
  logic [31:0] ar_addrh_qs;
  logic [31:0] ar_addrh_wd;
  logic ar_addrh_we;
  logic [7:0] ar_cfg_len_qs;
  logic [7:0] ar_cfg_len_wd;
  logic ar_cfg_len_we;
  logic [2:0] ar_cfg_size_qs;
  logic [2:0] ar_cfg_size_wd;
  logic ar_cfg_size_we;
  logic [3:0] ar_cfg_nsaid_qs;
  logic [3:0] ar_cfg_nsaid_wd;
  logic ar_cfg_nsaid_we;
  logic [31:0] aw_addrl_qs;
  logic [31:0] aw_addrl_wd;
  logic aw_addrl_we;
  logic [31:0] aw_addrh_qs;
  logic [31:0] aw_addrh_wd;
  logic aw_addrh_we;
  logic [7:0] aw_cfg_len_qs;
  logic [7:0] aw_cfg_len_wd;
  logic aw_cfg_len_we;
  logic [2:0] aw_cfg_size_qs;
  logic [2:0] aw_cfg_size_wd;
  logic aw_cfg_size_we;
  logic [3:0] aw_cfg_nsaid_qs;
  logic [3:0] aw_cfg_nsaid_wd;
  logic aw_cfg_nsaid_we;

  // Register instances
  // R[control]: V(False)

  //   F[r_ready]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_control_r_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.control.r_ready.de),
    .d      (hw2reg.control.r_ready.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.r_ready.q ),

    // to register interface (read)
    .qs     (control_r_ready_qs)
  );


  //   F[w_ready]: 1:1
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_control_w_ready (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.control.w_ready.de),
    .d      (hw2reg.control.w_ready.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.w_ready.q ),

    // to register interface (read)
    .qs     (control_w_ready_qs)
  );


  //   F[r_enable]: 2:2
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_r_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_r_enable_we),
    .wd     (control_r_enable_wd),

    // from internal hardware
    .de     (hw2reg.control.r_enable.de),
    .d      (hw2reg.control.r_enable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.r_enable.q ),

    // to register interface (read)
    .qs     (control_r_enable_qs)
  );


  //   F[w_enable]: 3:3
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_w_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_w_enable_we),
    .wd     (control_w_enable_wd),

    // from internal hardware
    .de     (hw2reg.control.w_enable.de),
    .d      (hw2reg.control.w_enable.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.w_enable.q ),

    // to register interface (read)
    .qs     (control_w_enable_qs)
  );


  //   F[r_burst]: 4:4
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_r_burst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_r_burst_we),
    .wd     (control_r_burst_wd),

    // from internal hardware
    .de     (hw2reg.control.r_burst.de),
    .d      (hw2reg.control.r_burst.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.r_burst.q ),

    // to register interface (read)
    .qs     (control_r_burst_qs)
  );


  //   F[w_burst]: 5:5
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_control_w_burst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_w_burst_we),
    .wd     (control_w_burst_wd),

    // from internal hardware
    .de     (hw2reg.control.w_burst.de),
    .d      (hw2reg.control.w_burst.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.w_burst.q ),

    // to register interface (read)
    .qs     (control_w_burst_qs)
  );


  //   F[r_burst_len]: 13:6
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_control_r_burst_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_r_burst_len_we),
    .wd     (control_r_burst_len_wd),

    // from internal hardware
    .de     (hw2reg.control.r_burst_len.de),
    .d      (hw2reg.control.r_burst_len.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.r_burst_len.q ),

    // to register interface (read)
    .qs     (control_r_burst_len_qs)
  );


  //   F[w_burst_len]: 21:14
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_control_w_burst_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (control_w_burst_len_we),
    .wd     (control_w_burst_len_wd),

    // from internal hardware
    .de     (hw2reg.control.w_burst_len.de),
    .d      (hw2reg.control.w_burst_len.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.control.w_burst_len.q ),

    // to register interface (read)
    .qs     (control_w_burst_len_qs)
  );


  // R[ar_addrl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ar_addrl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ar_addrl_we),
    .wd     (ar_addrl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ar_addrl.q ),

    // to register interface (read)
    .qs     (ar_addrl_qs)
  );


  // R[ar_addrh]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_ar_addrh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ar_addrh_we),
    .wd     (ar_addrh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ar_addrh.q ),

    // to register interface (read)
    .qs     (ar_addrh_qs)
  );


  // R[ar_cfg]: V(False)

  //   F[len]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_ar_cfg_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ar_cfg_len_we),
    .wd     (ar_cfg_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ar_cfg.len.q ),

    // to register interface (read)
    .qs     (ar_cfg_len_qs)
  );


  //   F[size]: 10:8
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_ar_cfg_size (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ar_cfg_size_we),
    .wd     (ar_cfg_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ar_cfg.size.q ),

    // to register interface (read)
    .qs     (ar_cfg_size_qs)
  );


  //   F[nsaid]: 14:11
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_ar_cfg_nsaid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ar_cfg_nsaid_we),
    .wd     (ar_cfg_nsaid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ar_cfg.nsaid.q ),

    // to register interface (read)
    .qs     (ar_cfg_nsaid_qs)
  );


  // R[aw_addrl]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_aw_addrl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (aw_addrl_we),
    .wd     (aw_addrl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.aw_addrl.q ),

    // to register interface (read)
    .qs     (aw_addrl_qs)
  );


  // R[aw_addrh]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_aw_addrh (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (aw_addrh_we),
    .wd     (aw_addrh_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.aw_addrh.q ),

    // to register interface (read)
    .qs     (aw_addrh_qs)
  );


  // R[aw_cfg]: V(False)

  //   F[len]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RW"),
    .RESVAL  (8'h0)
  ) u_aw_cfg_len (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (aw_cfg_len_we),
    .wd     (aw_cfg_len_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.aw_cfg.len.q ),

    // to register interface (read)
    .qs     (aw_cfg_len_qs)
  );


  //   F[size]: 10:8
  prim_subreg #(
    .DW      (3),
    .SWACCESS("RW"),
    .RESVAL  (3'h0)
  ) u_aw_cfg_size (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (aw_cfg_size_we),
    .wd     (aw_cfg_size_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.aw_cfg.size.q ),

    // to register interface (read)
    .qs     (aw_cfg_size_qs)
  );


  //   F[nsaid]: 14:11
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_aw_cfg_nsaid (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (aw_cfg_nsaid_we),
    .wd     (aw_cfg_nsaid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.aw_cfg.nsaid.q ),

    // to register interface (read)
    .qs     (aw_cfg_nsaid_qs)
  );




  logic [6:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == GENERIC_READER_WRITER_CONTROL_OFFSET);
    addr_hit[1] = (reg_addr == GENERIC_READER_WRITER_AR_ADDRL_OFFSET);
    addr_hit[2] = (reg_addr == GENERIC_READER_WRITER_AR_ADDRH_OFFSET);
    addr_hit[3] = (reg_addr == GENERIC_READER_WRITER_AR_CFG_OFFSET);
    addr_hit[4] = (reg_addr == GENERIC_READER_WRITER_AW_ADDRL_OFFSET);
    addr_hit[5] = (reg_addr == GENERIC_READER_WRITER_AW_ADDRH_OFFSET);
    addr_hit[6] = (reg_addr == GENERIC_READER_WRITER_AW_CFG_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(GENERIC_READER_WRITER_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(GENERIC_READER_WRITER_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(GENERIC_READER_WRITER_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(GENERIC_READER_WRITER_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(GENERIC_READER_WRITER_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(GENERIC_READER_WRITER_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(GENERIC_READER_WRITER_PERMIT[6] & ~reg_be)))));
  end

  assign control_r_enable_we = addr_hit[0] & reg_we & !reg_error;
  assign control_r_enable_wd = reg_wdata[2];

  assign control_w_enable_we = addr_hit[0] & reg_we & !reg_error;
  assign control_w_enable_wd = reg_wdata[3];

  assign control_r_burst_we = addr_hit[0] & reg_we & !reg_error;
  assign control_r_burst_wd = reg_wdata[4];

  assign control_w_burst_we = addr_hit[0] & reg_we & !reg_error;
  assign control_w_burst_wd = reg_wdata[5];

  assign control_r_burst_len_we = addr_hit[0] & reg_we & !reg_error;
  assign control_r_burst_len_wd = reg_wdata[13:6];

  assign control_w_burst_len_we = addr_hit[0] & reg_we & !reg_error;
  assign control_w_burst_len_wd = reg_wdata[21:14];

  assign ar_addrl_we = addr_hit[1] & reg_we & !reg_error;
  assign ar_addrl_wd = reg_wdata[31:0];

  assign ar_addrh_we = addr_hit[2] & reg_we & !reg_error;
  assign ar_addrh_wd = reg_wdata[31:0];

  assign ar_cfg_len_we = addr_hit[3] & reg_we & !reg_error;
  assign ar_cfg_len_wd = reg_wdata[7:0];

  assign ar_cfg_size_we = addr_hit[3] & reg_we & !reg_error;
  assign ar_cfg_size_wd = reg_wdata[10:8];

  assign ar_cfg_nsaid_we = addr_hit[3] & reg_we & !reg_error;
  assign ar_cfg_nsaid_wd = reg_wdata[14:11];

  assign aw_addrl_we = addr_hit[4] & reg_we & !reg_error;
  assign aw_addrl_wd = reg_wdata[31:0];

  assign aw_addrh_we = addr_hit[5] & reg_we & !reg_error;
  assign aw_addrh_wd = reg_wdata[31:0];

  assign aw_cfg_len_we = addr_hit[6] & reg_we & !reg_error;
  assign aw_cfg_len_wd = reg_wdata[7:0];

  assign aw_cfg_size_we = addr_hit[6] & reg_we & !reg_error;
  assign aw_cfg_size_wd = reg_wdata[10:8];

  assign aw_cfg_nsaid_we = addr_hit[6] & reg_we & !reg_error;
  assign aw_cfg_nsaid_wd = reg_wdata[14:11];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = control_r_ready_qs;
        reg_rdata_next[1] = control_w_ready_qs;
        reg_rdata_next[2] = control_r_enable_qs;
        reg_rdata_next[3] = control_w_enable_qs;
        reg_rdata_next[4] = control_r_burst_qs;
        reg_rdata_next[5] = control_w_burst_qs;
        reg_rdata_next[13:6] = control_r_burst_len_qs;
        reg_rdata_next[21:14] = control_w_burst_len_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = ar_addrl_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = ar_addrh_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[7:0] = ar_cfg_len_qs;
        reg_rdata_next[10:8] = ar_cfg_size_qs;
        reg_rdata_next[14:11] = ar_cfg_nsaid_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = aw_addrl_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = aw_addrh_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[7:0] = aw_cfg_len_qs;
        reg_rdata_next[10:8] = aw_cfg_size_qs;
        reg_rdata_next[14:11] = aw_cfg_nsaid_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module generic_reader_writer_reg_top_intf
#(
  parameter int AW = 5,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output generic_reader_writer_reg_pkg::generic_reader_writer_reg2hw_t reg2hw, // Write
  input  generic_reader_writer_reg_pkg::generic_reader_writer_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  generic_reader_writer_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


